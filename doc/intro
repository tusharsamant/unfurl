USING UNFURL

The syntax of unfurl is minimal: the script is a sequence of
whitespace-separated tokens, with the exceptions being single-quoted and
double-quoted strings. Everything from a # sign to the end of line is
ignored, unless the # is in a quoted string.

An example script:

  #!/usr/bin/env unfurl
  'Hello, ' 'World' . print "\n" print

The tokens are two strings, followed by ".", "print", another string,
and "print" again. The Forth-ish model adopted in unfurl consists of a
single stack of values that starts off empty. The effect of a literal is
to push it on the stack.

After the first two tokens are processed, therefore, the stack has two
strings.

The "." token that comes next has no literal value, nor does it have a
magic meaning, as will be described, so the effect is to look it up in
the dictionary. unfurl's built-in dictionary defines it as the
equivalent of Perl string concatenation.

In sum, the stack, which had two strings on it, changes as follows: the
top two values are popped, the concatenation applied, and the result
pushed on the stack.

"print" is another builtin: it takes a single value off the top of the
stack and prints it. It returns nothing to the stack.

By this time, "Hello, World" has been printed and there is nothing on
the stack.

The next token is a double-quoted string--the  effect is that a string
with a single newline is now pushed on the stack. The "print" following
it takes it off the stack and prints it.

The script is then complete and exits.


MORE EXAMPLES

  #!/usr/bin/env unfurl
  1 2 3 + print "\n" print

This prints 5 and a newline. 1 remains on the stack at exit time.

  3 * print

This gives an underflow error: the builtin * expects two arguments.

If printing a newline after something seems to be a common need, we may
try something like this:

  { print "\n" print } :say

There are a couple of new concepts here. The token "{" has a special
meaning--it begins "compiling" the following tokens. The stack does not
change. The compilation proceeds up to "}", where it ends. The effect of
"}" is to put the result of the compilation ("anonymous function") on
the stack.

Thus the effect of the code before the ":say" token is to leave an
anonymous function on the stack. As for ":say", the colon is a magic
sigil, which expects a function and binds it to the name following ":".

In sum, the line defines a new function called "say" and the stack is
left empty.

Now you can use "say" anywhere you might have wanted to use the more
laborious code:

  "Hello, World" say

is equivalent to

  "Hello, World" print "\n" print


VARIABLES

Analogous to function definition, unfurl has variable assignment.

  4 >i

The ">" sigil assigns to the variable i (creating it if necessary) the
top value on the stack. Following the above assignment,

  i 2 *

will leave 8 on the stack, since the token i has now a defined meaning,
namely to push the current value of i on the stack. To define an
i-incrementing function, you could now say:

  { i 1 + >i } :incr-i

Any occurence of incr-i as a token will now do the intended.


WARNING

Something like

  {i 1 + >i}    # wrong

will result in an error. This is because the first token is "{i", which
has no meaning. Whitespace is all-important in unfurl--it is more or
less the only important thing. This Forth-like convention keeps the
syntax simple.


ASIDE

  { 1 + } :incr

is a definition of a word that increments whatever is on stack. What if
you did this, instead?

  { 1 + } >incr1

This will assign to the variable incr1 the code for incrementing. To run
the code you will have to do this:

  incr1 execute

This is equivalent to a plain invocation of incr.


PERL MAGIC

There are two more types of token which need no pre-defined meaning and
are interpreted magically. To begin with:

  Text::CSV require

The first token contains the character sequence '::'. unfurl hence puts
the string 'Text::CSV' on stack. The rule is just a simplification, to
make modules look cleaner.

If the module you need is top-level, you can make unfurl understand it
by appending '::'. Example:

  FileHandle:: require

Plain "FileHandle" will normally be looked up in the dictionary and may
not be defined.

The word require does the requiring of the module.

There is a variant form of require, called require-as. This expects an
even-sized array, with pairs of module names and "namespaces". An example:

  s[ FileHandle F  Text::CSV C  Digest::MD5 MD5 ] require-as

This loads three modules (note that the s[ ] has obviated the need to
monkey-name FileHandle), and defines three short tokens:

  F s[ sheet.csv ] open
  MD5 ::new
  ( fh md -- fh md fh )
  [ ::getline ]
  .add
  ::hexdigest print
  ::close

In certain cases, require and require-as can define several functions. See
the section on loading libraries below.

unfurl adds ~/lib/uf to the library search path.


MORE PERL MAGIC

The '::' sigil, introduced in the last example above, invokes a method,
which is looked up at runtime and hence doesn't need prior definition:

  Digest::MD5 ::new >checksum

will create a variable checksum, and assign the equivalent of
Digest::MD5->new() to it. Later:

  checksum ::hexdigest print

will print the hexdigest.


ARRAYS

A method may also be called with the '.' sigil. In this case it expects
an array of arguments on top of the object or class.

Arrays are constructed by means of two special tokens, as follows: the
token '[' stores a mark to the current top of the stack. It does nothing
else. ']' pops everything from the stack above the most recent mark,
makes an array out of the values, erases the mark, and puts the array on
top of the stack. Thus, we may add details to the previous example as
follows:

  Digest::MD5 ::new
  [ "first buffer" ] .add
  [ "second buffer" ] .add
  [ "third buffer" ] .add
  ::hexdigest print

Needless to say, ::method is equivalent to [ ] .method.

The word % makes a hash out of an array. The words @ ! and @!
implement get, put and get-put operations respectively:

  [ ] % >a_hash
  a_hash "key1" "value1" !
  a_hash "key1" @ print       # prints value1
  a_hash "key1" "newval" @!   # assigns newval, leaves value1 on stack

  [ 'a'  'b' ] >an_array
  an_array 'c' , 'd' , 12 ,   # push three more values
  an_array 1 @ print
  an_array 5 'number_five' !
  an_array 5 'numero_cinco' @!

The word , (comma) pushes a value or an array on top on the array
under it.

The word ![ gives more freedom in placing marks--it consumes a numerical
argument, and places a mark on the (remaining) stack at the appropriate
position:

  s( H He Li ) # three strings on stack
  2 ![         # places mark "between" H and He
  'Be' ]       # adds another string and closes array

The net effect here is the same as 'H' [ 'He' 'Li' 'Be' ] .

One application of this is:

  { ![ ] } :args

This defines a word which "clumps" the desired number of values on the
stack:

  s( H He Li Be ) 3 args

will have the same effect as before. This could be used to pick a
fixed number of arguments and ship it off to a method, for instance.


LITERALS

The s( word sometimes provides a quick way to put several literals on the
stack. It resembles the Perl qw() op in certain ways--all tokens up to
the next ) are interpreted as single-quoted values. Thus:

  s( Hydrogen Helium Lithium )

is equivalent to

  'Hydrogen' 'Helium' 'Lithium'

The s[ ] pair does the same, except, as may be anticipated, it executes
appropriate marker logic to put an array of literals on the stack:

  s[ H Hydrogen He Helium Li Lithium ] % >element

for instance, will leave a hash with 3 keys on the stack.


PERMUTATIONS

The final two tokens with special meaning are the parenthesis marks.
Just as braces delimit a function, parentheses delimit a special kind of
function: a permutation, which rearranges the stack near its top. As an
example, suppose the stack contains this:

  "2010-05" 114 "Bob" "Accounting" 300

Following this with

  ( id name dept expense -- expense dept name )

will change the stack to:

  "2010-05" 300 "Accounting" "Bob"

Presumably, a previous function left 5 values on stack, of which only 4
are needed, and in another order.

The tokens id, name, dept etc have unrelated meanings inside and outside
the permutation.

Some time-honored stack-twiddling functions rewritten in this fashion:

  { ( a -- ) } :drop
  { ( a -- a a ) } :dup
  { ( a b -- b a ) } :swap
  { ( a b c -- b c a ) } :rot
  { ( a b c d -- c d a b ) } :2swap


LOOPS

Iteration is accomplished by means of the do function. The general form of
invocation is:

    iter action do

action is expected to be a function.

iter can take three forms:

  1. A number: if greater than 0, then action is executed iter times:

    { ( a b -- b a b ) + } >fib-step
    0 1 
    13 fib-step do

  The do on the third line transforms the 0 1 on the stack to 1 1, then
  to 1 2, to 2 3, etc--i.e. it calculates Fibonacci numbers. One could
  define:

    {
      0 1 ( N zero one -- zero one N )
      { ( a b -- b a b ) + } do
      swap drop
    } :fib

    13 fib print

  2. An array or a hash: key/value pairs are successively placed on
  the stack and action invoked. In the case of an array, keys are
  indexes, which go from 0 to one less than the length of the array,
  in that order. For a hash, it is whatever order Perl provides.

    { { '->' swap "\n" . . . print } do } :pretty-print
    [ name Pelham age 60 ] % pretty-print

  3. A function: the semantics mirror Perl's while () { }.

    { open-or-die { getline } { print } do } :cat
    "somefile" cat

The words next and last, if found within action, stop executing
action at that point. next proceeds with the next iteration, and
last terminates the loop. next and last outside do loops make
unfurl die.

CONDITIONALS

There is only one form available at the moment--it is named if.

  3 10 .. {
    swap drop                  # forget index, keep value
    dup { last } swap 6 > if   # last if value is > 6
    say
  } do

A more general cond operator is planned.


LOADING LIBRARIES AND ADDING Perl-DRIVING FUNCTIONS

Arbitrary unfurl functions can be defined from Perl source files. The
built-in "dict" searches file names from the library path, which is
currently hard-coded to . (current directory) and ~/lib/uf. The Perl
files need to return a hashref, from function names to code refs.

The code in the code refs communicates with the stack by means of two
functions: give(@) and take($). take(n) picks n elements off the stack
(erroring on underflow) and places them in a globally available array
@R. It also returns @R, if you need private names or don't expect @R to
survive.

The code typically just needs to return with the intended result, which
unfurl hands off to give(). give places its arguments on the stack and
clears @R.

Another way to define functions is through require or require-as : after
requiring a module, these functions look for a sub called unfurl() in the
module, which is expected to return a hashref as above.

If require-as is used, the function names get defined under the prefix
("namespace") that the module was aliased to. An example will clarify this:
assume that tables.pm resides in e.g. ~/lib/uf (which, as mentioned above,
is in the Perl search path for unfurl), and contains the sub unfurl. Then
doing

  s[ tables T ] require-as

not only defines T, but also T.dir, T.verbose etc. What is assumed here,
of course, is that tables::unfurl() returns a hashref with dir and verbose
among the keys. If you did

  tables:: require

instead, the plain functions dir and verbose would be defined.


BUILTINS, AVAILABLE LIBRARIES, AND Perl GLUE

Need to code: i/o, sql gen, regex, graphicsmagick, xml and json
