#!/usr/bin/env perl

use warnings;
use strict;
use integer;
use Data::Dumper; $Data::Dumper::Terse=1;

my ($line, $char); # for error messages

my @LIB = (".", "$ENV{HOME}/lib/uf");

#also for Perl
use lib @LIB;

# functions being compiled
my @COMPILING = ();

# "qw" in the stream
my $QW;

# permutation, if being compiled--just all tokens, for postprocessing
my $PERM = 0;

# global vars -- perl value semantics
my %VAR = ();

# pile of functions--starts with a "reusable" null
my @WORDS = ([]);

# The Stack
my @S = ();
my @MARKS = ();

# scratchpad aka "registers"
our @R = ();

# populate scratchpad -- used by word implementations
sub take ($) { die "Underflow\n" if @S < $_[0]; return(@R = splice @S, -$_[0]) }

# return computed values -- used by word implementations
sub give (@) { push @S, @_; @R = () }

# mark stack position
sub mark () { push @MARKS, $#S }

# pop things above topmost mark
sub skim () { die "No mark\n" unless @MARKS; splice @S, pop(@MARKS) + 1 }

sub call ($);
sub execute ($);
sub add_dict ($$);
sub add_var ($$);

# named functions -- a sub, or a [ sequence of words ]
my %DICT;
%DICT = (
   # indented like this for readability

  '['  => sub {
            mark; return
          },
  ']'  => sub {
            my $skim; eval {$skim = [skim]};
            if ($@) { die "']' found in weird place\n" }
            $skim
          },
  ',[' => sub {
            take 1; mark; @{$R[0]}
          },
  '![' => sub {
            take 1;
            $R[0] = $#S - $R[0];
            if ($R[0] < -1) { die "underflow\n" }
            @MARKS = sort { $a <=> $b } (@MARKS, $R[0]);
            return
          },
  '!]' => sub {
            pop @MARKS if @MARKS;
            return
          },
  ','  => sub {
            my ($base, $plus) = take 2;
            push @$base, ref($plus) eq 'ARRAY' ? @$plus : $plus;
            $base
          },


  # normal indent

  '%' => sub { take 1; +{@{$R[0]}} },
  '@' => sub {
    take 2;
    if    (ref($R[0]) eq 'HASH')  { $R[0]{$R[1]} }
    elsif (ref($R[0]) eq 'ARRAY') { $R[0][$R[1]] }
    else                          { die "cannot get\n" }
  },

  '!' => sub {
    take 3;
    if    (ref($R[0]) eq 'HASH')  { $R[0]{$R[1]} = $R[2] }
    elsif (ref($R[0]) eq 'ARRAY') { $R[0][$R[1]] = $R[2] }
    else                          { die "cannot set\n" }
    return;
  },
  '@!' => sub {
    take 3;
    my $result;
    if (ref($R[0]) eq 'HASH') {
      $result = $R[0]{$R[1]};
      $R[0]{$R[1]} = $R[2];
    }
    elsif (ref($R[0]) eq 'ARRAY') {
      $result = $R[0][$R[1]];
      $R[0][$R[1]] = $R[2];
    }
    else {
      die "cannot set\n";
    }
    $result;
  },
  drop  => sub { take 1; return },
  dup   => sub { take 1; @R[0,0] },
  swap  => sub { take 2; @R[1,0] },
  print => sub { take 1; print $R[0]; return },
  reset => sub { @S=@MARKS=@R=() },
  '+'   => sub { take 2; $R[0]+$R[1] }, '-'  => sub { take 2; $R[0]-$R[1] },
  '*'   => sub { take 2; $R[0]*$R[1] }, '/'  => sub { take 2; $R[0]/$R[1] },
  '.'   => sub { take 2; $R[0].$R[1] },
  '=='  => sub { take 2; $R[0] == $R[1] },
  '<'   => sub { take 2; $R[0] < $R[1] },
  '>'   => sub { take 2; $R[0] > $R[1] },
  '<='  => sub { take 2; $R[0] <= $R[1] },
  '>='  => sub { take 2; $R[0] >= $R[1] },
  '!='  => sub { take 2; $R[0] != $R[1] },
  'eq'  => sub { take 2; $R[0] eq $R[1] },
  'ne'  => sub { take 2; $R[0] ne $R[1] },
  'gt'  => sub { take 2; $R[0] gt $R[1] },
  'lt'  => sub { take 2; $R[0] lt $R[1] },
  'ge'  => sub { take 2; $R[0] ge $R[1] },
  'le'  => sub { take 2; $R[0] le $R[1] },

  env   => sub { \%ENV },
  '..'  => sub { take 2; [$R[0] .. $R[1]] },

  if => sub {
    my ($then, $test) = take 2;
    call $then if $test;
    return
  },

  cond => sub {
    my($cl) = take 1;
    my ($test, $then);
    while (@$cl) {
      ($test, $then) = splice(@$cl, 0, 2);
      if ($test) {
        call $then; last
      }
    }
    return
  },

  do => sub {
    my ($iter, $f, @res) = take 2;
    my $ref = ref($iter);
    if (!$ref) {
      $iter += 0;
      if ($iter > 0) {
        ITER_N: for (1 .. $iter) {
          eval { call $f };
          if ($@) {
            if ($@ =~ /^last\b/) { last ITER_N }
            elsif ($@ !~ /^next\b/) { die $@ }
          }
        }
      }
    }
    elsif ($ref eq 'ARRAY') {
      ITER_A: for my $i (0 .. $#$iter) {
        push @S, $i, $iter->[$i];
        eval { call $f };
        if ($@) {
          if ($@ =~ /^last\b/) { last ITER_A }
          elsif ($@ !~ /^next\b/) { die $@ }
        }
      }
    }
    elsif ($ref eq 'HASH') {
      ITER_H: while (my($k, $v) = each %$iter) {
        push @S, $k, $v;
        eval { call $f };
        if ($@) {
          if ($@ =~ /^last\b/) { last ITER_H }
          elsif ($@ !~ /^next\b/) { die $@ }
        }
      }
    }
    else {
      ITER: {
        mark;
        call $iter;
        if ((@res = skim) && $res[0]) {
          push @S, @res;
          eval { call $f };
          if ($@) {
            if ($@ =~ /^last\b/) { last ITER }
            elsif ($@ !~ /^next\b/) { die $@ }
          }
          redo ITER
        }
      }
    }
    return
  },

  next => sub { die "next makes no sense" },
  last => sub { die "last makes no sense" },
  die  => sub { die(take 1) },

  execute      => sub { call(take 1) },
  'dump'       => sub { _dump(\@S)    },
  'dump.dict'  => sub { _dump(\%DICT) },
  'dump.reg'   => sub { _dump(\@R)    },
  'dump.var'   => sub { _dump(\%VAR)  },
  'dump.words' => sub { _dump(\@WORDS) },
  'dump.c'     => sub { _dump(\@COMPILING) },
  'dump.marks' => sub { _dump(\@MARKS) },

  lib => sub { push @LIB, take 1; return },

  dict => sub {
    my ($f) = take 1;
    $f = [$f] if !ref($f); # extra benefit
    dict($_, '') for @$f;
    return
  },

  'dict-as' => sub {
    take 1;
    while (my($f, $pre) = splice(@{$R[0]}, 0, 2)) {
      if (length($pre)) { $pre .= '.' }
      dict($f, $pre)
    }
    return
  },

  require => sub {
    my ($m) = take 1; # see dict above
    $m = [$m] if !ref($m);
    for (@$m) {
      s{::}{/}g; s{/$}{}; require($_ . '.pm');
      if ($_->can('unfurl')) {
        add_dict $_->unfurl(), "";
      }
    }
    return
  },

  'require-as' => sub {
    take 1;
    while (my($m, $name) = splice(@{$R[0]}, 0, 2)) {
      $VAR{$name} = $m;
      for ($m) {
        s{::}{/}g; s{/$}{}; require($_ . '.pm');
        if ($_->can('unfurl')) {
          add_dict $_->unfurl(), "$name.";
        }
      }
    }
    return
  },

);

eval {
  execute(lexed(join '', <>));
}; if ($@) {
  if ($ENV{DEBUG}) {
    die "$line $char\n" . Dumper({
      MSG       => $@,
      COMPILING => \@COMPILING,
      WORDS     => \@WORDS,
      VAR       => \%VAR,
      S         => \@S,
      R         => \@R,
    }) . "\n";
  }
  else {
    die "$line $char : $@";
  }
};

sub execute ($) {
  my @input = @{shift()};
  my($in, $tok, $ref, $l, $c);

  # SIGILS
  #    .  obj args .method
  #    >  val >var
  #    :  { function } :f
  # STATE CHANGE
  #    {  begin compiling new function
  #    }  end compiling current function
  #    (  begin permutation
  #    )  end permutation

  while (@input) {
    $in = shift @input;
    ($tok, $l, $c) = @$in;
    ($line, $char) = ($l, $c) if $l;

    if ($ref = ref($tok)) {
      if ($ref eq 'SCALAR') {
        unshift @input, @{$WORDS[$$tok]};
      }
      elsif ($ref eq 'REF') {
        give $$tok;
      }
      elsif ($ref eq 'CODE') {
        give &$tok;
      }
      elsif ($ref eq 'ARRAY') {
        unshift @input, map {[$_,$line,$char]} @$tok; # line:char stack dump
      }
      else {
        die "unexpected $ref ref\n";
      }
    }

    elsif (($tok eq 's[' or $tok eq 's(') and !$QW) {
      $QW = [];
    }
    elsif ($QW) {
      if ($tok eq ']') {
        give $QW; $QW = undef
      }
      elsif ($tok eq ')') {
        give @$QW; $QW = undef
      }
      else {
        push @$QW, $tok
      }
    }

    elsif ($tok =~ /^#/) { next }

    elsif ($tok eq '(') {
      if ($PERM) { die "Already permuting\n" }
      $PERM = [];
    }
    elsif ($tok eq ')') {
      if (!$PERM) { die "')' found in weird place\n" }
      $PERM = genperm($PERM);
      if (@COMPILING) {
        push @WORDS, [ [$PERM, $line, $char] ];
        push @{$COMPILING[-1]}, \(@WORDS - 1);
      }
      else {
        &$PERM;
      }
      $PERM = 0;
    }
    elsif ($PERM) {
      push @$PERM, [$tok, $line, $char];
    }

    elsif ($tok eq '{') {
      push @COMPILING, [];
    }
    elsif ($tok eq '}') {
      my $fn = pop @COMPILING;
      if (!$fn) { die "'}' found in weird place\n" };
      if (@$fn) {
        push @WORDS, $fn; $fn = $#WORDS
      }
      else {
        $fn = 0 # reuse null function--an "optimizaton"
      }
      # "code" is \integer, "deferred" is \\integer
      if (@COMPILING) {
        push @{$COMPILING[-1]}, \\$fn
      }
      else {
        give \$fn
      }
    }

    # in-compile tok
    elsif (@COMPILING) { push @{$COMPILING[-1]}, $tok }

    # number
    elsif ($tok =~ /^-*\d+$/) { give (0 + $tok) }

    # string
    elsif ($tok =~ /^'/) {
      $tok =~ s/^'(.*)'$/$1/sm or die "unterminated string\n";
      give $tok
    }

    # string
    elsif ($tok =~ /^"/) {
      $tok =~ /"$/ or die "unterminated string\n";
      give eval(qq{$tok})
    }

    # define function
    elsif ($tok =~ s/^:([^:])/$1/) {
      my($f) = take 1;
      $DICT{$tok} = ref($f) eq 'SCALAR' ? $WORDS[$$f] : $f
    }

    # poke var
    elsif ($tok =~ s/^>(?=.)//) { ($VAR{$tok}) = take 1 }

    # Perl method
    elsif ($tok =~ s/^\.([^.])/$1/) {
      my($obj, $args) = take 2;
      # "obj" may be a module
      if (!ref($obj)) { $obj =~ s{::$}{} }
      give $obj->$tok(@$args)
    }

    # Perl method, no args
    elsif ($tok =~ s/^::(?=.)//) {
      my($obj) = take 1;
      # "obj" may be a module
      if (!ref($obj)) { $obj =~ s{::$}{} }
      give $obj->$tok()
    }

    elsif (my $f = $DICT{$tok}) {
      if (ref($f) eq 'ARRAY')  {
        unshift @input, map {[$_,0,0]} @$f
      }
      elsif (ref($f) eq 'CODE')  {
        give &$f
      }
      else {
        die "dict[$tok] not understood\n"
      }
    }

    elsif (exists $VAR{$tok}) { give $VAR{$tok} }

    # module--a slightly more regular string
    elsif ($tok =~ m{^((\w+::)+\w*)$}) {
      give $tok
    }

    else { die "$tok not defined\n"; }

  }
  return;
}

sub call ($) {
  my $f = shift;
  if (ref($f) eq 'CODE') {
    give &$f;
  }
  else {
    $f = $WORDS[$$f];
    execute([map [$_,$line,$char], @$f]);
  }
}

sub _dump { print STDERR Dumper(@_); return }

sub lexed {
  # tokens and whitespace
  my @T = $_[0] =~ /(\s*) (".*?(?<!\\)" | '.*?(?<!\\)' | \#.*?\n | \S+)/sxg;
  my ($line, $char, @tokens) = (1, 1);
  my $count = sub {
    my $str = shift;
    my $l = $str =~ tr/\n/\n/;
    $str =~ s/^.*\n//s;
    $line += $l;
    $char = ($l ? 1 : $char) + length($str);
  };
  while (my($space, $tok) = splice(@T, 0, 2)) {
    $count->($space);
    push @tokens, [$tok, $line, $char];
    $count->($tok);
  }
  \@tokens;
}

sub genperm {
  my $taken = 0;
  my $rhs = 0;
  my(%perm, $t);
  for (@{$_[0]}) {
    ($t, $line, $char) = @$_;
    if (!$rhs) {
      if ($t eq '--') {
        $rhs = [];
      }
      elsif ($perm{$t}) {
        die "repeated identifier $t\n";
      }
      else {
        $perm{$t} = ++$taken;
      }
    }
    else {
      if (!$perm{$t}) { die "unknown identifier $t\n" };
      push @$rhs, $perm{$t} - 1;
    }
  }
  sub { take($taken); give(@R[@$rhs]) };
}

sub dict {
  my ($f, $pre) = @_;
  my $d;
  for (@LIB) { $d = do("$_/$f") and last }
  if (!$d) { die "dict\n" }
  add_dict $d, $pre;
  return
}

sub add_dict ($$) {
  my ($d, $pre) = @_;
  while (my($w,$x) = each %$d) { $DICT{$pre.$w} = $x }
}

sub add_var ($$) {
  my ($d, $pre) = @_;
  while (my($w,$x) = each %$d) { $VAR{$pre.$w} = $x }
}
