#!/usr/bin/env perl

use warnings;
use strict;
use integer;
use Data::Dumper; $Data::Dumper::Terse=1;

my @LIB = (".", "$ENV{HOME}/lib/uf");

# functions being compiled
my @COMPILING = ();

# permutation, if being compiled--just all tokens, for postprocessing
my $PERM = 0;

# global vars -- perl value semantics
my %VAR = ();

# pile of functions--starts with a "reusable" null
my @ANON = ([]);

# The Stack
my @S = ();
my @MARKS = ();

# scratchpad aka "registers"
our @R = ();

# separate treatment for modules
my @MODULES = ();

# populate scratchpad -- used by word implementations
sub take ($) {
  die "Underflow\n" if @S < $_[0];
  @R = splice @S, -$_[0];
}

# return computed values -- used by word implementations
sub give (@) {
  push @S, @_;
  @R = ()
}

# named functions -- a sub, or a [ sequence of words ]
my %DICT;
%DICT = (
  '['   => sub { push @MARKS, $#S; return },
  ']'   => sub {
    if (!@MARKS) { die "']' found in weird place\n" }
    [splice @S, pop(@MARKS) + 1]
  },
  '@'   => sub {
    take 2;
    if    (ref($R[0]) eq 'HASH')  { $R[0]{$R[1]} }
    elsif (ref($R[0]) eq 'ARRAY') { $R[0][$R[1]] }
    else                          { die "cannot get\n" }
  },

  '!'   => sub {
    take 3;
    if    (ref($R[0]) eq 'HASH')  { $R[0]{$R[1]} = $R[2] }
    elsif (ref($R[0]) eq 'ARRAY') { $R[0][$R[1]] = $R[2] }
    else                          { die "cannot set\n" }
    return;
  },
  '@!'   => sub {
    take 3;
    my $result;
    if (ref($R[0]) eq 'HASH') {
      $result = $R[0]{$R[1]};
      $R[0]{$R[1]} = $R[2];
    }
    elsif (ref($R[0]) eq 'ARRAY') {
      $result = $R[0][$R[1]];
      $R[0][$R[1]] = $R[2];
    }
    else {
      die "cannot set\n";
    }
    $result;
  },
  drop  => sub { take 1; return },
  dup   => sub { take 1; @R[0,0] },
  swap  => sub { take 2; @R[1,0] },
  print => sub { take 1; print $R[0]; return },
  '+'   => sub { take 2; $R[0]+$R[1] }, '-'  => sub { take 2; $R[0]-$R[1] },
  '*'   => sub { take 2; $R[0]*$R[1] }, '/'  => sub { take 2; $R[0]/$R[1] },
  '.'   => sub { take 2; $R[0].$R[1] }, qr   => sub { take 1; qr/$R[0]/ },
  env   => sub { \%ENV },
  iota  => sub { take 2; [$R[0] .. $R[1]] },

  for => sub {
    my ($range, $f) = take 2;
    for (my $i = 0; $i < @$range; $i++) {
      give $range->[$i], $i; call($f)
    }
    return
  },
  map => sub {
    my ($range, $f) = take 2;
    my $result = [];
    for my $r (@$range) {
      give $r;
      call($f);
      push @$result, take 1;
    }
    $result
  },

  execute      => sub { call(take 1); return },
  'dump'       => sub { _dump(\@S)    },
  'dump.dict'  => sub { _dump(\%DICT) },
  'dump.reg'   => sub { _dump(\@R)    },
  'dump.var'   => sub { _dump(\%VAR)  },
  'dump.anon'  => sub { _dump(\@ANON) },
  'dump.c'     => sub { _dump(\@COMPILING) },
  'dump.mod'   => sub { _dump(\@MODULES) },
  'dump.marks' => sub { _dump(\@MARKS) },
  die          => sub { die(take 1) },

  dict => sub {
    take 1;
    my $d;
    for (@LIB) { $d = do("$_/$R[0]") and last }
    if (!$d) { die "require\n" }
    while (my($w,$x) = each %$d) { $DICT{$w} = $x }
    return
  },
  lib => sub { push @LIB, take 1; return },
  require => sub {
    die "nothing to require\n" unless @MODULES;
    for (@MODULES) { s{::}{/}g; s{/$}{}; require($_ . '.pm') }
    @MODULES = ();
  },
);

my ($line, $char);

eval {
  execute(lexed(join '', <>));
}; if ($@) {
  if ($ENV{DEBUG}) {
    die "$line $char\n" . Dumper({
      MSG       => $@,
      COMPILING => \@COMPILING,
      ANON      => \@ANON,
      VAR       => \%VAR,
      S         => \@S,
      R         => \@R,
    }) . "\n";
  }
  else {
    die "$line $char : $@";
  }
};

sub execute {
  my @input = @{shift()};
  my($in, $tok, $ref, $l, $c);

  # SIGILS
  #    .  obj args .method
  #    >  val >var
  #    :  { function } :f
  # STATE CHANGE
  #    {  begin compiling new function
  #    }  end compiling current function
  #    (  begin permutation
  #    )  end permutation

  while (@input) {
    $in = shift @input;
    ($tok, $l, $c) = @$in;
    ($line, $char) = ($l, $c) if $l;

    if ($ref = ref($tok)) {
      if ($ref eq 'SCALAR') {
        unshift @input, @{$ANON[$$tok]};
      }
      elsif ($ref eq 'REF') {
        give $$tok;
      }
      elsif ($ref eq 'CODE') {
        give &$tok;
      }
      elsif ($ref eq 'ARRAY') {
        unshift @input, map {[$_,$line,$char]} @$tok; # line:char stack dump
      }
      else {
        die "unexpected $ref ref\n";
      }
    }

    elsif ($tok =~ /^#/) { next }

    elsif ($tok eq '(') {
      if ($PERM) { die "Already permuting\n" }
      $PERM = [];
    }
    elsif ($tok eq ')') {
      if (!$PERM) { die "')' found in weird place\n" }
      $PERM = genperm($PERM);
      if (@COMPILING) {
        push @ANON, [ [$PERM, $line, $char] ];
        push @{$COMPILING[-1]}, \(@ANON - 1);
      }
      else {
        &$PERM;
      }
      $PERM = 0;
    }
    elsif ($PERM) {
      push @$PERM, [$tok, $line, $char];
    }

    elsif ($tok eq '{') {
      push @COMPILING, [];
    }
    elsif ($tok eq '}') {
      my $fn = pop @COMPILING;
      if (!$fn) { die "'}' found in weird place\n" };
      if (@$fn) {
        push @ANON, $fn; $fn = $#ANON;
      }
      else {
        $fn = 0; # reuse null function--an "optimizaton"
      }
      # "code" is \integer, "deferred" is \\integer
      if (@COMPILING) {
        push @{$COMPILING[-1]}, \\$fn;
      }
      else {
        give \$fn;
      }
    }

    # in-compile tok
    elsif (@COMPILING) { push @{$COMPILING[-1]}, $tok }

    # number
    elsif ($tok =~ /^-*\d+$/) { give (0 + $tok) }

    # string
    elsif ($tok =~ /^'/) {
      $tok =~ s/^'(.*)'$/$1/sm or die "unterminated string\n";
      give $tok;
    }

    # string
    elsif ($tok =~ /^"/) {
      $tok =~ /"$/ or die "unterminated string\n";
      give eval(qq{$tok});
    }

    # define function
    elsif ($tok =~ s/^:([^:])/$1/) { take 1; $DICT{$tok} = $ANON[${$R[0]}] }

    # poke var
    elsif ($tok =~ s/^>(?=.)//) { take 1; $VAR{$tok} = $R[0] }

    # Perl method
    elsif ($tok =~ s/^\.(?=.)//) {
      if (@MODULES) {
        my $m = pop @MODULES;
        $m =~ s{::$}{};
        take 1; give $m->$tok(@{$R[0]})
      }
      else {
        my($obj, $genarg) = take 2;
        if (ref($R[1]) eq 'SCALAR') {
          my $scope = $#S;
          call($genarg);
          $genarg = [splice @S, $scope+1];
        }
        give $obj->$tok(@$genarg)
      }
    }

    # Perl method, no args
    elsif ($tok =~ s/^::(?=.)//) {
      if (@MODULES) {
        my $m = pop @MODULES;
        $m =~ s{::$}{};
        give $m->$tok()
      }
      else {
        take 1; give $R[0]->$tok()
      }
    }

    elsif (my $f = $DICT{$tok}) {
      if (ref($f) eq 'ARRAY')  {
        unshift @input, map {[$_,0,0]} @$f
      }
      elsif (ref($f) eq 'CODE')  {
        give &$f;
      }
      else {
        die "dict[$tok] not understood\n"
      }
    }

    elsif (exists $VAR{$tok}) { give $VAR{$tok} }

    # module handling
    elsif ($tok =~ m{^((\w+::)+\w*)$}) {
      push @MODULES, $tok;
    }

    else { die "$tok not defined\n"; }

  }
}

sub call {
  my $f = shift;
  $f = $ANON[$$f];
  execute([map [$_,0,0], @$f]);
}

sub _dump { print STDERR Dumper(@_); return } 

sub lexed {
  # tokens and whitespace
  my @T = $_[0] =~ /(\s*) (".*?(?<!\\)" | '.*?(?<!\\)' | \#.*?\n | \S+)/sxg;
  my ($line, $char, @tokens) = (1, 1);
  my $count = sub {
    my $str = shift;
    my $l = $str =~ tr/\n/\n/;
    $str =~ s/^.*\n//s;
    $line += $l;
    $char = ($l ? 1 : $char) + length($str);
  };
  while (my($space, $tok) = splice(@T, 0, 2)) {
    $count->($space);
    push @tokens, [$tok, $line, $char];
    $count->($tok);
  }
  \@tokens;
}

sub genperm {
  my $taken = 0;
  my $rhs = 0;
  my(%perm, $t);
  for (@{$_[0]}) {
    ($t, $line, $char) = @$_;
    if (!$rhs) {
      if ($t eq '--') {
        $rhs = [];
      }
      elsif ($perm{$t}) {
        die "repeated identifier $t\n";
      }
      else {
        $perm{$t} = ++$taken;
      }
    }
    else {
      if (!$perm{$t}) { die "unknown identifier $t\n" };
      push @$rhs, $perm{$t} - 1;
    }
  }
  sub { take($taken); give(@R[@$rhs]) };
}
